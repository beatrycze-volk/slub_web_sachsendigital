// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`can draw to canvas 1`] = `
Array [
  Object {
    "props": Object {
      "dHeight": 0,
      "dWidth": 0,
      "dx": 0,
      "dy": 0,
      "img": VideoMock {
        "_mockHeight": 1080,
        "_mockWidth": 1920,
      },
      "sHeight": 0,
      "sWidth": 0,
      "sx": 0,
      "sy": 0,
    },
    "transform": Array [
      1,
      0,
      0,
      1,
      0,
      0,
    ],
    "type": "drawImage",
  },
  Object {
    "props": Object {
      "value": "25px Arial",
    },
    "transform": Array [
      1,
      0,
      0,
      1,
      0,
      0,
    ],
    "type": "font",
  },
  Object {
    "props": Object {
      "value": "end",
    },
    "transform": Array [
      1,
      0,
      0,
      1,
      0,
      0,
    ],
    "type": "textAlign",
  },
  Object {
    "props": Object {
      "value": "#ffffff",
    },
    "transform": Array [
      1,
      0,
      0,
      1,
      0,
      0,
    ],
    "type": "fillStyle",
  },
  Object {
    "props": Object {
      "value": 5,
    },
    "transform": Array [
      1,
      0,
      0,
      1,
      0,
      0,
    ],
    "type": "shadowBlur",
  },
  Object {
    "props": Object {
      "value": "#000000",
    },
    "transform": Array [
      1,
      0,
      0,
      1,
      0,
      0,
    ],
    "type": "shadowColor",
  },
  Object {
    "props": Object {
      "maxWidth": null,
      "text": "Test Video / 1912",
      "x": 1910,
      "y": 1070,
    },
    "transform": Array [
      1,
      0,
      0,
      1,
      0,
      0,
    ],
    "type": "fillText",
  },
]
`;

exports[`can draw to canvas 2`] = `
Array [
  Object {
    "props": Object {
      "dHeight": 0,
      "dWidth": 0,
      "dx": 0,
      "dy": 0,
      "img": VideoMock {
        "_mockHeight": 540,
        "_mockWidth": 960,
      },
      "sHeight": 0,
      "sWidth": 0,
      "sx": 0,
      "sy": 0,
    },
    "transform": Array [
      1,
      0,
      0,
      1,
      0,
      0,
    ],
    "type": "drawImage",
  },
  Object {
    "props": Object {
      "value": "12px Arial",
    },
    "transform": Array [
      1,
      0,
      0,
      1,
      0,
      0,
    ],
    "type": "font",
  },
  Object {
    "props": Object {
      "value": "end",
    },
    "transform": Array [
      1,
      0,
      0,
      1,
      0,
      0,
    ],
    "type": "textAlign",
  },
  Object {
    "props": Object {
      "value": "#ffffff",
    },
    "transform": Array [
      1,
      0,
      0,
      1,
      0,
      0,
    ],
    "type": "fillStyle",
  },
  Object {
    "props": Object {
      "value": 5,
    },
    "transform": Array [
      1,
      0,
      0,
      1,
      0,
      0,
    ],
    "type": "shadowBlur",
  },
  Object {
    "props": Object {
      "value": "#000000",
    },
    "transform": Array [
      1,
      0,
      0,
      1,
      0,
      0,
    ],
    "type": "shadowColor",
  },
  Object {
    "props": Object {
      "maxWidth": null,
      "text": "Test Video / 1912",
      "x": 955,
      "y": 535,
    },
    "transform": Array [
      1,
      0,
      0,
      1,
      0,
      0,
    ],
    "type": "fillText",
  },
]
`;

exports[`can open screenshot overlay 1`] = `
<div
  class="sxnd-modal screenshot-modal"
>
  <div
    class="headline-container"
  >
    <h3 />
    <span
      class="modal-close icon-close"
    />
  </div>
  <div
    class="body-container"
  >
    <div
      class="screenshot-config"
    >
      
        
      <input
        class="show-metadata"
        id="cb-show-metadata"
        type="checkbox"
      />
      <!--
        -->
      <label
        for="cb-show-metadata"
      >
         Metadaten einblenden
      </label>
      

        Â·

        
      <a
        class="download-image"
        href="#"
      >
        Bild herunterladen
      </a>
      
      
    </div>
    <canvas
      height="1080"
      width="1920"
    />
  </div>
</div>
`;
